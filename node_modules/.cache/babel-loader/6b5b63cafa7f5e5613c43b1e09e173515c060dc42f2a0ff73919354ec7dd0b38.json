{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_highcharts = _resolveComponent(\"highcharts\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_highcharts, {\n    \"constructor-type\": 'stockChart',\n    class: \"hc\",\n    options: $data.chartOptions,\n    ref: \"chart\"\n  }, null, 8, [\"options\"])]);\n}","map":{"version":3,"names":["_createElementBlock","_createVNode","_component_highcharts","class","options","$data","chartOptions","ref"],"sources":["/Users/rashmee/Desktop/usagm/heatmap/src/components/MainPackedBubble.vue"],"sourcesContent":["<template>\n  <div>\n    <highcharts\n      :constructor-type=\"'stockChart'\"\n      class=\"hc\"\n      :options=\"chartOptions\"\n      ref=\"chart\"\n    ></highcharts>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    chartData: {\n      type: Array,\n      default: () => [],\n    },\n    mainProp: {\n      type: String,\n      default: \"division\",\n    },\n    subProp: {\n      type: String,\n      default: \"service\",\n    },\n    valueProp: {\n      type: String,\n      default: \"insight_engagements\",\n    },\n  },\n  data() {\n    return {\n      chartOptions: {\n        chart: {\n          backgroundColor: \"#fbfcf8\",\n          type: \"packedbubble\",\n          // width: \"100%\",\n          height: \"100%\",\n        },\n        title: {\n          text: \"Engagements\",\n          align: \"center\",\n        },\n        accessibility: {\n          enabled: false,\n        },\n        exporting: {\n          enabled: true,\n          buttons: {\n            contextButton: {\n              menuItems: [\n                \"viewFullscreen\",\n                \"printChart\",\n                \"separator\",\n                \"downloadPNG\",\n                \"downloadJPEG\",\n                \"separator\",\n                \"downloadPDF\",\n                \"downloadCSV\",\n              ],\n            },\n          },\n        },\n        credits: {\n          enabled: false,\n        },\n        legend: {\n          enabled: true,\n          itemStyle: {\n            color: \"#000\",\n          },\n        },\n        rangeSelector: {\n          enabled: false,\n        },\n        navigator: {\n          enabled: false,\n        },\n        scrollbar: {\n          enabled: false,\n        },\n        tooltip: {\n          useHTML: true,\n          pointFormat: \"<b>{point.name}:</b> {point.value}\",\n        },\n        plotOptions: {\n          packedbubble: {\n            minSize: \"1%\",\n            maxSize: \"50%\",\n            zMin: 0,\n            zMax: 100,\n            layoutAlgorithm: {\n              gravitationalConstant: 0.05,\n              splitSeries: true,\n              seriesInteraction: false,\n              dragBetweenSeries: true,\n              parentNodeLimit: true,\n            },\n            dataLabels: {\n              enabled: true,\n              format: \"{point.name}\",\n              style: {\n                color: \"black\",\n                textOutline: \"none\",\n                fontWeight: \"normal\",\n              },\n            },\n          },\n        },\n      },\n      fullData: [],\n    };\n  },\n  watch: {\n    chartData: {\n      handler(newChartData, oldChartData) {\n        if (newChartData !== oldChartData) {\n          this.updateChartData(newChartData);\n        }\n      },\n      deep: true,\n    },\n  },\n  created() {\n    this.updateChartData(this.chartData);\n  },\n  methods: {\n    updateChartData(data) {\n      this.fullData = data;\n      const getMaxValue = Math.max(\n        ...this.fullData.map((d) => d[this.valueProp])\n      );\n      const result = Object.values(\n        this.fullData.reduce((acc, item) => {\n          const mainProp = item[this.mainProp];\n          const subProp = item[this.subProp];\n          const valueProp = item[this.valueProp];\n          if (!acc[mainProp]) acc[mainProp] = { name: mainProp, data: {} };\n          if (!acc[mainProp].data[subProp]) acc[mainProp].data[subProp] = 0;\n          acc[mainProp].data[subProp] += valueProp;\n          return acc;\n        }, {})\n      ).map(({ name, data }) => ({\n        name,\n        data: Object.entries(data).map(([name, value]) => ({ name, value })),\n      }));\n      this.chartOptions.plotOptions.packedbubble.zMax = getMaxValue;\n      this.chartOptions.series = result;\n    },\n  },\n};\n</script>\n"],"mappings":";;;uBACEA,mBAAA,CAOM,cANJC,YAAA,CAKcC,qBAAA;IAJX,kBAAgB,EAAE,YAAY;IAC/BC,KAAK,EAAC,IAAI;IACTC,OAAO,EAAEC,KAAA,CAAAC,YAAY;IACtBC,GAAG,EAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}