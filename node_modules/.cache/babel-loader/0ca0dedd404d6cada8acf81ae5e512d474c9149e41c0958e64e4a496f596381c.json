{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createVNode as _createVNode } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_highcharts = _resolveComponent(\"highcharts\");\n  return _openBlock(), _createElementBlock(\"div\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.chartOptionsList, (chartOptions, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"chart-container\"\n    }, [_createVNode(_component_highcharts, {\n      options: chartOptions,\n      class: \"hc\"\n    }, null, 8, [\"options\"])]);\n  }), 128))]);\n}","map":{"version":3,"names":["_createElementBlock","_Fragment","_renderList","$options","chartOptionsList","chartOptions","index","key","class","_createVNode","_component_highcharts","options"],"sources":["/Users/rashmee/Desktop/usagm/heatmap/src/components/MainPieChart.vue"],"sourcesContent":["<template>\n  <div>\n    <div\n      v-for=\"(chartOptions, index) in chartOptionsList\"\n      :key=\"index\"\n      class=\"chart-container\"\n    >\n      <highcharts :options=\"chartOptions\" class=\"hc\"></highcharts>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    chartData: {\n      type: Array,\n      default: () => [],\n    },\n    properties: {\n      type: Array,\n      default: () => [],\n    },\n  },\n  data() {\n    return {\n      fullData: [],\n    };\n  },\n  computed: {\n    chartOptionsList() {\n      if (this.fullData.length === 0) {\n        return [];\n      }\n\n      return this.getPropertiesSeries();\n    },\n  },\n  watch: {\n    chartData: {\n      handler(newChartData, oldChartData) {\n        if (newChartData !== oldChartData) {\n          this.updateChartData(newChartData);\n        }\n      },\n      deep: true,\n    },\n  },\n  created() {\n    this.updateChartData(this.chartData);\n  },\n  methods: {\n    updateChartData(data) {\n      this.fullData = data;\n    },\n    getPropertiesSeries() {\n      const chartOptionsList = this.properties.map((prop) => {\n        const propData = this.fullData.reduce((acc, item) => {\n          const { division, service } = item;\n          const key = division.toLowerCase();\n\n          if (!acc[key]) {\n            acc[key] = {\n              name: division,\n              id: key,\n              data: [],\n            };\n          }\n\n          acc[key].data.push({\n            name: service,\n            y: item[prop],\n          });\n\n          return acc;\n        }, {});\n\n        const transformedData = Object.values(propData);\n        const drills = transformedData.map((item) => {\n          const aggregatedData = item.data.reduce((result, { name, y }) => {\n            if (!result[name]) {\n              result[name] = 0;\n            }\n            result[name] += y;\n            return result;\n          }, {});\n\n          const transformedChartData = Object.entries(aggregatedData).map(\n            ([name, totalY]) => [name, totalY]\n          );\n\n          return {\n            name: item.name,\n            id: item.name,\n            data: transformedChartData,\n          };\n        });\n\n        return {\n          chart: {\n            type: \"pie\",\n            backgroundColor: \"#fbfcf8\",\n            spacingTop: 20,\n            spacingBottom: 20,\n            spacingLeft: 20,\n            spacingRight: 20,\n            height: 300,\n          },\n          accessibility: {\n            enabled: false,\n          },\n          credits: {\n            enabled: false,\n          },\n          legend: {\n            enabled: false,\n            itemStyle: {\n              color: \"#ffffff\",\n            },\n          },\n          rangeSelector: {\n            enabled: false,\n          },\n          exporting: {\n            enabled: true,\n            buttons: {\n              contextButton: {\n                menuItems: [\n                  \"viewFullscreen\",\n                  \"printChart\",\n                  \"separator\",\n                  \"downloadPNG\",\n                  \"downloadJPEG\",\n                  \"separator\",\n                  \"downloadPDF\",\n                  \"downloadCSV\",\n                ],\n              },\n            },\n          },\n          navigator: {\n            enabled: false,\n          },\n          scrollbar: {\n            enabled: false,\n          },\n          title: {\n            text: prop\n              .split(\"_\")\n              .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n              .join(\" \"),\n            style: {\n              color: \"#000\",\n              fontSize: \"14px\",\n              fontWeight: \"bold\",\n            },\n          },\n          plotOptions: {\n            pie: {\n              colors: [\n                \"#DA70D6\",\n                \"#FFD700\",\n                \"#6B8E23\",\n                \"#FF7F50\",\n                \"#20B2AA\",\n                \"#FF8C00\",\n                \"#483D8B\",\n                \"#2E8B57\",\n                \"#FF69B4\",\n                \"#1E90FF\",\n              ],\n              dataLabels: {\n                enabled: true,\n                format: \"<b>{point.name}</b>\",\n                style: {\n                  color: \"#000\",\n                },\n              },\n              tooltip: {\n                pointFormat: \"<b>{point.percentage:.2f}%</b>\",\n              },\n            },\n          },\n          series: [\n            {\n              name: prop\n                .split(\"_\")\n                .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n                .join(\" \"),\n              data: Object.values(propData).map(({ name, data }) => ({\n                name,\n                y: data.reduce((sum, { y }) => sum + y, 0),\n                drilldown: name,\n              })),\n            },\n          ],\n          drilldown: {\n            series: drills,\n          },\n        };\n      });\n      return chartOptionsList;\n    },\n  },\n};\n</script>\n\n<style>\n.chart-container {\n  width: 50%;\n  float: left;\n  padding: 20px;\n  box-sizing: border-box;\n  background-color: #fbfcf8;\n}\n</style>\n"],"mappings":";;;uBACEA,mBAAA,CAQM,e,kBAPJA,mBAAA,CAMMC,SAAA,QARVC,WAAA,CAGsCC,QAAA,CAAAC,gBAAgB,EAHtD,CAGcC,YAAY,EAAEC,KAAK;yBAD7BN,mBAAA,CAMM;MAJHO,GAAG,EAAED,KAAK;MACXE,KAAK,EAAC;QAENC,YAAA,CAA4DC,qBAAA;MAA/CC,OAAO,EAAEN,YAAY;MAAEG,KAAK,EAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}