{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  props: {\n    chartData: {\n      type: Array,\n      default: () => []\n    },\n    currentDataType: {\n      type: String,\n      default: \"\"\n    },\n    colorSettings: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data() {\n    return {\n      chartOptions: {\n        chart: {\n          map: \"myMapName\"\n        },\n        title: {\n          text: \"\"\n        },\n        accessibility: {\n          enabled: false\n        },\n        exporting: {\n          enabled: true,\n          buttons: {\n            contextButton: {\n              menuItems: [\"viewFullscreen\", \"printChart\", \"separator\", \"downloadPNG\", \"downloadJPEG\", \"separator\", \"downloadPDF\", \"downloadCSV\"]\n            }\n          }\n        },\n        credits: {\n          enabled: false\n        },\n        mapNavigation: {\n          enabled: true,\n          buttonOptions: {\n            verticalAlign: \"bottom\"\n          }\n        },\n        colorAxis: {\n          type: \"logarithmic\",\n          allowNegativeLog: true\n        },\n        tooltip: {\n          formatter() {\n            return `<b>${this.point.country}</b>: ${this.point[this.series.colorKey].toLocaleString()}`;\n          }\n        },\n        series: [{\n          data: [],\n          joinBy: [\"name\", \"country\"],\n          name: \"\",\n          colorKey: \"\",\n          dataLabels: {\n            enabled: false\n          }\n        }]\n      }\n    };\n  },\n  watch: {\n    chartData: {\n      handler(newChartData, oldChartData) {\n        if (newChartData !== oldChartData) {\n          this.updateChartData(newChartData);\n        }\n      },\n      deep: true\n    },\n    currentDataType: {\n      handler(newType, oldType) {\n        if (newType !== oldType) {\n          this.updateChartData(this.chartData);\n        }\n      }\n    }\n  },\n  created() {\n    this.updateChartData(this.chartData);\n  },\n  methods: {\n    updateChartData(data) {\n      const countryNameMapping = {\n        \"United States\": \"United States of America\",\n        \"Russian Federation\": \"Russia\"\n      };\n      let newData = data.reduce((acc, curr) => {\n        let countryName = countryNameMapping[curr.country] || curr.country;\n        const foundIndex = acc.findIndex(item => item.country === countryName);\n        if (foundIndex !== -1) {\n          acc[foundIndex][this.currentDataType] += curr[this.currentDataType];\n        } else {\n          const newDataEntry = {\n            country: countryName\n          };\n          newDataEntry[this.currentDataType] = curr[this.currentDataType];\n          acc.push(newDataEntry);\n        }\n        return acc;\n      }, []);\n      let minData = Math.min(...newData.map(v => v[this.currentDataType]));\n      const maxData = Math.max(...newData.map(v => v[this.currentDataType]));\n      if (minData === 0) minData = 1;\n      const {\n        maxColor,\n        stops\n      } = this.colorSettings[this.currentDataType];\n      this.chartOptions.title.text = this.currentDataType.split(\"_\").map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(\" \");\n      this.chartOptions.series[0].name = this.chartOptions.title.text;\n      this.chartOptions.series[0].colorKey = this.currentDataType;\n      this.chartOptions.series[0].data = newData;\n      this.chartOptions.colorAxis.min = minData;\n      this.chartOptions.colorAxis.max = maxData;\n      this.chartOptions.colorAxis.minColor = \"#fff\";\n      this.chartOptions.colorAxis.maxColor = maxColor;\n      this.chartOptions.colorAxis.stops = stops;\n\n      // Update the chart\n      if (this.$refs.highcharts) {\n        this.$refs.highcharts.chart.update(this.chartOptions);\n      }\n    }\n  }\n};","map":{"version":3,"names":["props","chartData","type","Array","default","currentDataType","String","colorSettings","Object","data","chartOptions","chart","map","title","text","accessibility","enabled","exporting","buttons","contextButton","menuItems","credits","mapNavigation","buttonOptions","verticalAlign","colorAxis","allowNegativeLog","tooltip","formatter","point","country","series","colorKey","toLocaleString","joinBy","name","dataLabels","watch","handler","newChartData","oldChartData","updateChartData","deep","newType","oldType","created","methods","countryNameMapping","newData","reduce","acc","curr","countryName","foundIndex","findIndex","item","newDataEntry","push","minData","Math","min","v","maxData","max","maxColor","stops","split","word","charAt","toUpperCase","slice","join","minColor","$refs","highcharts","update"],"sources":["/Users/rashmee/Desktop/usagm/heatmap/src/components/MainMapChart.vue"],"sourcesContent":["<template>\n  <div>\n    <highcharts\n      :constructor-type=\"'mapChart'\"\n      :options=\"chartOptions\"\n      ref=\"highcharts\"\n    ></highcharts>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    chartData: {\n      type: Array,\n      default: () => [],\n    },\n    currentDataType: {\n      type: String,\n      default: \"\",\n    },\n    colorSettings: {\n      type: Object,\n      default: () => ({}),\n    },\n  },\n  data() {\n    return {\n      chartOptions: {\n        chart: {\n          map: \"myMapName\",\n        },\n        title: {\n          text: \"\",\n        },\n        accessibility: {\n          enabled: false,\n        },\n        exporting: {\n          enabled: true,\n          buttons: {\n            contextButton: {\n              menuItems: [\n                \"viewFullscreen\",\n                \"printChart\",\n                \"separator\",\n                \"downloadPNG\",\n                \"downloadJPEG\",\n                \"separator\",\n                \"downloadPDF\",\n                \"downloadCSV\",\n              ],\n            },\n          },\n        },\n        credits: {\n          enabled: false,\n        },\n        mapNavigation: {\n          enabled: true,\n          buttonOptions: {\n            verticalAlign: \"bottom\",\n          },\n        },\n        colorAxis: {\n          type: \"logarithmic\",\n          allowNegativeLog: true,\n        },\n        tooltip: {\n          formatter() {\n            return `<b>${this.point.country}</b>: ${this.point[\n              this.series.colorKey\n            ].toLocaleString()}`;\n          },\n        },\n        series: [\n          {\n            data: [],\n            joinBy: [\"name\", \"country\"],\n            name: \"\",\n            colorKey: \"\",\n            dataLabels: {\n              enabled: false,\n            },\n          },\n        ],\n      },\n    };\n  },\n  watch: {\n    chartData: {\n      handler(newChartData, oldChartData) {\n        if (newChartData !== oldChartData) {\n          this.updateChartData(newChartData);\n        }\n      },\n      deep: true,\n    },\n    currentDataType: {\n      handler(newType, oldType) {\n        if (newType !== oldType) {\n          this.updateChartData(this.chartData);\n        }\n      },\n    },\n  },\n  created() {\n    this.updateChartData(this.chartData);\n  },\n  methods: {\n    updateChartData(data) {\n      const countryNameMapping = {\n        \"United States\": \"United States of America\",\n        \"Russian Federation\": \"Russia\",\n      };\n\n      let newData = data.reduce((acc, curr) => {\n        let countryName = countryNameMapping[curr.country] || curr.country;\n        const foundIndex = acc.findIndex(\n          (item) => item.country === countryName\n        );\n        if (foundIndex !== -1) {\n          acc[foundIndex][this.currentDataType] += curr[this.currentDataType];\n        } else {\n          const newDataEntry = { country: countryName };\n          newDataEntry[this.currentDataType] = curr[this.currentDataType];\n          acc.push(newDataEntry);\n        }\n        return acc;\n      }, []);\n\n      let minData = Math.min(...newData.map((v) => v[this.currentDataType]));\n      const maxData = Math.max(...newData.map((v) => v[this.currentDataType]));\n      if (minData === 0) minData = 1;\n\n      const { maxColor, stops } = this.colorSettings[this.currentDataType];\n\n      this.chartOptions.title.text = this.currentDataType\n        .split(\"_\")\n        .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(\" \");\n      this.chartOptions.series[0].name = this.chartOptions.title.text;\n      this.chartOptions.series[0].colorKey = this.currentDataType;\n      this.chartOptions.series[0].data = newData;\n      this.chartOptions.colorAxis.min = minData;\n      this.chartOptions.colorAxis.max = maxData;\n      this.chartOptions.colorAxis.minColor = \"#fff\";\n      this.chartOptions.colorAxis.maxColor = maxColor;\n      this.chartOptions.colorAxis.stops = stops;\n\n      // Update the chart\n      if (this.$refs.highcharts) {\n        this.$refs.highcharts.chart.update(this.chartOptions);\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Add your component-specific styles here */\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}