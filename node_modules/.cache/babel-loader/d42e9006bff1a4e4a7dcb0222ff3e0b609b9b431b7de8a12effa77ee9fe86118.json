{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, normalizeStyle as _normalizeStyle, resolveComponent as _resolveComponent, createVNode as _createVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-67359aeb\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"w-100 clearfix d-flex\"\n};\nconst _hoisted_2 = {\n  class: \"card-header\"\n};\nconst _hoisted_3 = {\n  class: \"card-body w-100 clearfix d-flex\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_highcharts = _resolveComponent(\"highcharts\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.metrics, (metric, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"card float-start flex-fill\"\n    }, [_createElementVNode(\"div\", _hoisted_2, _toDisplayString(metric.name), 1), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"h6\", {\n      class: \"float-start align-self-center\",\n      style: _normalizeStyle({\n        color: metric.color,\n        width: '35%'\n      })\n    }, _toDisplayString($options.formatNumber(metric.value)), 5), _createVNode(_component_highcharts, {\n      style: {\n        \"width\": \"65%\"\n      },\n      \"constructor-type\": 'stockChart',\n      class: \"hc float-start align-self-center\",\n      options: $options.getChartOptions(metric.property),\n      ref_for: true,\n      ref: \"chart\"\n    }, null, 8, [\"options\"])])]);\n  }), 128))]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_Fragment","_renderList","$props","metrics","metric","index","key","_createElementVNode","_hoisted_2","_toDisplayString","name","_hoisted_3","style","_normalizeStyle","color","width","$options","formatNumber","value","_createVNode","_component_highcharts","options","getChartOptions","property","ref_for","ref"],"sources":["/Users/rashmee/Desktop/usagm/heatmap/src/components/MainTotalsTrends.vue"],"sourcesContent":["<template>\n  <div class=\"w-100 clearfix d-flex\">\n    <div\n      v-for=\"(metric, index) in metrics\"\n      :key=\"index\"\n      class=\"card float-start flex-fill\"\n    >\n      <div class=\"card-header\">{{ metric.name }}</div>\n      <div class=\"card-body w-100 clearfix d-flex\">\n        <h6\n          class=\"float-start align-self-center\"\n          :style=\"{ color: metric.color, width: '35%' }\"\n        >\n          {{ formatNumber(metric.value) }}\n        </h6>\n        <highcharts\n          style=\"width: 65%\"\n          :constructor-type=\"'stockChart'\"\n          class=\"hc float-start align-self-center\"\n          :options=\"getChartOptions(metric.property)\"\n          ref=\"chart\"\n        ></highcharts>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport moment from \"moment\";\n\nexport default {\n  props: {\n    chartData: {\n      type: Array,\n      default: () => [],\n    },\n    metrics: {\n      type: Array,\n      default: () => [\n        { name: \"Visits\", property: \"visits\", color: \"#da70d6\" },\n        { name: \"Article Views\", property: \"article_views\", color: \"#ff7f50\" },\n        { name: \"Return Visits\", property: \"return_visits\", color: \"#ffd700\" },\n        { name: \"Audio Play\", property: \"audio_play\", color: \"#20b2aa\" },\n        { name: \"Video Play\", property: \"video_play\", color: \"#6b8e23\" },\n      ],\n    },\n  },\n  data() {\n    return {\n      fullData: [],\n    };\n  },\n  watch: {\n    chartData: {\n      handler(newChartData, oldChartData) {\n        if (newChartData !== oldChartData) {\n          this.updateChartData(newChartData);\n        }\n      },\n      deep: true,\n    },\n  },\n  created() {\n    this.updateChartData(this.chartData);\n  },\n  methods: {\n    updateChartData(data) {\n      this.fullData = data;\n      this.metrics.forEach((metric) => {\n        metric.value = this.fullData.reduce(\n          (acc, item) => acc + item[metric.property],\n          0\n        );\n      });\n    },\n    getChartOptions(property) {\n      const categories = [\n        ...new Set(\n          this.fullData.map((dt) => moment(dt.report_date).format(\"ll\"))\n        ),\n      ];\n\n      const groupedData = this.fullData.reduce((acc, item) => {\n        const date = item.report_date;\n        if (!acc[date]) {\n          acc[date] = {};\n        }\n        acc[date][property] = (acc[date][property] || 0) + item[property];\n        return acc;\n      }, {});\n\n      const aggregatedValues = Object.entries(groupedData).map(\n        ([date, values]) => ({\n          name: moment(date).format(\"lll\"),\n          y: values[property],\n        })\n      );\n\n      const seriesName = property\n        .split(\"_\")\n        .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(\" \");\n\n      const color = this.metrics.find(\n        (metric) => metric.property === property\n      )?.color;\n\n      return {\n        chart: {\n          type: \"areaspline\",\n          height: \"45%\",\n        },\n        rangeSelector: {\n          enabled: false,\n        },\n        navigator: {\n          enabled: false,\n        },\n        scrollbar: {\n          enabled: false,\n        },\n        accessibility: {\n          enabled: false,\n        },\n        title: {\n          text: \"\",\n        },\n        xAxis: {\n          visible: false,\n          categories: categories,\n        },\n        yAxis: {\n          visible: false,\n        },\n        legend: {\n          enabled: false,\n        },\n        credits: {\n          enabled: false,\n        },\n        exporting: {\n          enabled: false,\n        },\n        tooltip: {\n          backgroundColor: \"#fbfcf8\",\n          style: { color: \"#000\" },\n          formatter: function () {\n            return (\n              `<b><u>${moment(this.x).format(\"MMM D YYYY\")}</u></b><br/>` +\n              this.points\n                .map((point) => `${point.y.toLocaleString()}`)\n                .join(\"<br/>\")\n            );\n          },\n          shared: false,\n          useHTML: true,\n        },\n        plotOptions: {\n          series: {\n            fillOpacity: 0,\n            marker: {\n              enabled: false,\n              states: {\n                hover: {\n                  enabled: true,\n                },\n              },\n            },\n          },\n        },\n        series: [\n          {\n            name: seriesName,\n            data: aggregatedValues,\n            color: color,\n          },\n        ],\n      };\n    },\n    formatNumber(value) {\n      const numericSymbols = [\"K\", \"M\", \"B\", \"T\", \"P\", \"E\"];\n\n      if (value >= 1000) {\n        const symbolIndex = Math.floor(Math.log10(value) / 3);\n        const scaledValue = value / Math.pow(1000, symbolIndex);\n        const symbol = numericSymbols[symbolIndex - 1];\n        return `${scaledValue.toFixed(1)}${symbol}`;\n      }\n\n      return value.toString();\n    },\n  },\n};\n</script>\n\n<style scoped>\n.card {\n  margin: 1rem;\n}\n</style>\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAuB;;EAMzBA,KAAK,EAAC;AAAa;;EACnBA,KAAK,EAAC;AAAiC;;;uBAPhDC,mBAAA,CAuBM,OAvBNC,UAuBM,I,kBAtBJD,mBAAA,CAqBME,SAAA,QAvBVC,WAAA,CAGgCC,MAAA,CAAAC,OAAO,EAHvC,CAGcC,MAAM,EAAEC,KAAK;yBADvBP,mBAAA,CAqBM;MAnBHQ,GAAG,EAAED,KAAK;MACXR,KAAK,EAAC;QAENU,mBAAA,CAAgD,OAAhDC,UAAgD,EAAAC,gBAAA,CAApBL,MAAM,CAACM,IAAI,OACvCH,mBAAA,CAcM,OAdNI,UAcM,GAbJJ,mBAAA,CAKK;MAJHV,KAAK,EAAC,+BAA+B;MACpCe,KAAK,EAXhBC,eAAA;QAAAC,KAAA,EAW2BV,MAAM,CAACU,KAAK;QAAAC,KAAA;MAAA;wBAE1BC,QAAA,CAAAC,YAAY,CAACb,MAAM,CAACc,KAAK,QAE9BC,YAAA,CAMcC,qBAAA;MALZR,KAAkB,EAAlB;QAAA;MAAA,CAAkB;MACjB,kBAAgB,EAAE,YAAY;MAC/Bf,KAAK,EAAC,kCAAkC;MACvCwB,OAAO,EAAEL,QAAA,CAAAM,eAAe,CAAClB,MAAM,CAACmB,QAAQ;MAnBnDC,OAAA;MAoBUC,GAAG,EAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}