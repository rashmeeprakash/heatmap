{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport moment from \"moment\";\nexport default {\n  props: {\n    chartData: {\n      type: Array,\n      default: () => []\n    },\n    divisionProp: {\n      type: String,\n      default: \"division\"\n    },\n    serviceProp: {\n      type: String,\n      default: \"service\"\n    },\n    profileNameProp: {\n      type: String,\n      default: \"profile_name\"\n    },\n    reportDateProp: {\n      type: String,\n      default: \"report_date\"\n    },\n    videoViewsProp: {\n      type: String,\n      default: \"insight_video_views\"\n    }\n  },\n  data() {\n    return {\n      chartOptions: {\n        chart: {\n          backgroundColor: \"#fbfcf8\",\n          type: \"heatmap\",\n          plotBorderWidth: 1,\n          height: \"100%\",\n          margin: [0, 0, 0, 0]\n        },\n        title: {\n          text: \"Video Views\",\n          align: \"center\"\n        },\n        exporting: {\n          enabled: true,\n          buttons: {\n            contextButton: {\n              menuItems: [\"viewFullscreen\", \"printChart\", \"separator\", \"downloadPNG\", \"downloadJPEG\", \"separator\", \"downloadPDF\", \"downloadCSV\"]\n            }\n          }\n        },\n        credits: {\n          enabled: false\n        },\n        legend: {\n          enabled: true,\n          itemStyle: {\n            color: \"#000\"\n          }\n        },\n        rangeSelector: {\n          enabled: false\n        },\n        navigator: {\n          enabled: false\n        },\n        scrollbar: {\n          enabled: false\n        },\n        xAxis: {\n          categories: []\n        },\n        yAxis: {\n          categories: [],\n          reversed: false\n        },\n        accessibility: {\n          point: {\n            descriptionFormat: \"{(add index 1)}. \" + \"{series.xAxis.categories.(x)} \" + \"{series.yAxis.categories.(y)}, {value}.\"\n          }\n        },\n        colorAxis: {\n          min: 0,\n          minColor: \"#FFFFFF\",\n          maxColor: \"#DA70D6\"\n        },\n        tooltip: {\n          style: {\n            color: \"#000\"\n          },\n          formatter() {\n            const addCommas = value => {\n              return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            };\n            return `<b>${this.series.xAxis.categories[this.point.x]}</b> had<br>` + `<b>${addCommas(this.point.value)}</b> video views on <br>` + `<b>${this.series.yAxis.categories[this.point.y]}</b>`;\n          }\n        },\n        series: [{\n          name: \"Video Views\",\n          borderWidth: 1,\n          data: [],\n          dataLabels: {\n            enabled: true,\n            color: \"#000000\",\n            formatter() {\n              const numericSymbols = [\"K\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n              if (this.point.value >= 1000) {\n                const symbolIndex = Math.floor(Math.log10(this.point.value) / 3);\n                const scaledValue = this.point.value / Math.pow(1000, symbolIndex);\n                const symbol = numericSymbols[symbolIndex - 1];\n                return `${Math.ceil(scaledValue)}${symbol}`;\n              }\n              return this.point.value;\n            }\n          }\n        }],\n        responsive: {\n          rules: [{\n            condition: {\n              maxWidth: 500\n            },\n            chartOptions: {\n              yAxis: {\n                labels: {\n                  format: \"{substr value 0 1}\"\n                }\n              }\n            }\n          }]\n        }\n      },\n      fullData: []\n    };\n  },\n  watch: {\n    chartData: {\n      handler(newChartData, oldChartData) {\n        if (newChartData !== oldChartData) {\n          this.updateChartData(newChartData);\n        }\n      },\n      deep: true\n    }\n  },\n  created() {\n    this.updateChartData(this.chartData);\n  },\n  methods: {\n    updateChartData(data) {\n      this.fullData = data;\n      // console.log(this.fullData);\n      const filteredData = this.fullData.map(item => ({\n        division: item[this.divisionProp],\n        service: item[this.serviceProp],\n        profile_name: item[this.profileNameProp],\n        report_date: item[this.reportDateProp],\n        insight_video_views: item[this.videoViewsProp]\n      }));\n      const generateDateRanges = fullData => {\n        const dates = [...new Set(fullData.map(dt => dt.report_date))].sort();\n        const startDate = moment(dates[0]);\n        const endDate = moment(dates[dates.length - 1]);\n        const diffDays = endDate.diff(startDate, \"days\");\n        const diffMonths = endDate.diff(startDate, \"months\");\n        const sumInsightVideoViews = (start, end, division) => fullData.filter(dt => dt.division === division && moment(dt.report_date).isBetween(start, end, null, \"[)\")).reduce((sum, dt) => sum + dt.insight_video_views, 0);\n        const uniqueDivisions = [...new Set(fullData.map(dt => dt.division))];\n        const ranges = [];\n        uniqueDivisions.forEach(division => {\n          let current = startDate.clone();\n          while (current.isBefore(endDate) || current.isSame(endDate, \"day\")) {\n            let next;\n            let format;\n            if (diffDays <= 14) {\n              next = current.clone().add(1, \"day\");\n              format = \"ll\";\n            } else if (diffMonths <= 6) {\n              current.startOf(\"week\");\n              next = current.clone().add(1, \"week\");\n              format = \"ll\";\n            } else {\n              current.startOf(\"month\");\n              next = current.clone().add(1, \"month\");\n              format = \"MMMM, YYYY\";\n            }\n            ranges.push({\n              division,\n              date: current.format(format),\n              insight_video_views: sumInsightVideoViews(current, next, division)\n            });\n            current = next;\n          }\n        });\n        return ranges;\n      };\n      let yAxis = [...new Set(generateDateRanges(filteredData).map(d => d.date))];\n      let xAxis = [...new Set(generateDateRanges(filteredData).map(d => d.division))];\n      this.chartOptions.yAxis.categories = yAxis;\n      this.chartOptions.xAxis.categories = xAxis;\n      const groupedRanges = generateDateRanges(filteredData).reduce((acc, range) => {\n        if (!acc[range.division]) {\n          acc[range.division] = [];\n        }\n        acc[range.division].push(range);\n        return acc;\n      }, {});\n      const matrix = Object.keys(groupedRanges).flatMap(division => {\n        const divisionIndex = xAxis.indexOf(division);\n        return groupedRanges[division].map((range, dateIndex) => [divisionIndex, dateIndex, range.insight_video_views]);\n      });\n      this.chartOptions.series[0].data = matrix;\n      console.log(JSON.stringify(this.chartOptions));\n    }\n  }\n};","map":{"version":3,"names":["moment","props","chartData","type","Array","default","divisionProp","String","serviceProp","profileNameProp","reportDateProp","videoViewsProp","data","chartOptions","chart","backgroundColor","plotBorderWidth","height","margin","title","text","align","exporting","enabled","buttons","contextButton","menuItems","credits","legend","itemStyle","color","rangeSelector","navigator","scrollbar","xAxis","categories","yAxis","reversed","accessibility","point","descriptionFormat","colorAxis","min","minColor","maxColor","tooltip","style","formatter","addCommas","value","toString","replace","series","x","y","name","borderWidth","dataLabels","numericSymbols","symbolIndex","Math","floor","log10","scaledValue","pow","symbol","ceil","responsive","rules","condition","maxWidth","labels","format","fullData","watch","handler","newChartData","oldChartData","updateChartData","deep","created","methods","filteredData","map","item","division","service","profile_name","report_date","insight_video_views","generateDateRanges","dates","Set","dt","sort","startDate","endDate","length","diffDays","diff","diffMonths","sumInsightVideoViews","start","end","filter","isBetween","reduce","sum","uniqueDivisions","ranges","forEach","current","clone","isBefore","isSame","next","add","startOf","push","date","d","groupedRanges","acc","range","matrix","Object","keys","flatMap","divisionIndex","indexOf","dateIndex","console","log","JSON","stringify"],"sources":["/Users/rashmee/Desktop/usagm/heatmap/src/components/MainHeatMap.vue"],"sourcesContent":["<template>\n  <div>\n    <highcharts\n      :constructor-type=\"'stockChart'\"\n      class=\"hc\"\n      :options=\"chartOptions\"\n      ref=\"chart\"\n    ></highcharts>\n  </div>\n</template>\n\n<script>\nimport moment from \"moment\";\n\nexport default {\n  props: {\n    chartData: {\n      type: Array,\n      default: () => [],\n    },\n    divisionProp: {\n      type: String,\n      default: \"division\",\n    },\n    serviceProp: {\n      type: String,\n      default: \"service\",\n    },\n    profileNameProp: {\n      type: String,\n      default: \"profile_name\",\n    },\n    reportDateProp: {\n      type: String,\n      default: \"report_date\",\n    },\n    videoViewsProp: {\n      type: String,\n      default: \"insight_video_views\",\n    },\n  },\n  data() {\n    return {\n      chartOptions: {\n        chart: {\n          backgroundColor: \"#fbfcf8\",\n          type: \"heatmap\",\n          plotBorderWidth: 1,\n          height: \"100%\",\n          margin: [0, 0, 0, 0],\n        },\n        title: {\n          text: \"Video Views\",\n          align: \"center\",\n        },\n        exporting: {\n          enabled: true,\n          buttons: {\n            contextButton: {\n              menuItems: [\n                \"viewFullscreen\",\n                \"printChart\",\n                \"separator\",\n                \"downloadPNG\",\n                \"downloadJPEG\",\n                \"separator\",\n                \"downloadPDF\",\n                \"downloadCSV\",\n              ],\n            },\n          },\n        },\n        credits: {\n          enabled: false,\n        },\n        legend: {\n          enabled: true,\n          itemStyle: {\n            color: \"#000\",\n          },\n        },\n        rangeSelector: {\n          enabled: false,\n        },\n        navigator: {\n          enabled: false,\n        },\n        scrollbar: {\n          enabled: false,\n        },\n        xAxis: {\n          categories: [],\n        },\n        yAxis: {\n          categories: [],\n          reversed: false,\n        },\n        accessibility: {\n          point: {\n            descriptionFormat:\n              \"{(add index 1)}. \" +\n              \"{series.xAxis.categories.(x)} \" +\n              \"{series.yAxis.categories.(y)}, {value}.\",\n          },\n        },\n        colorAxis: {\n          min: 0,\n          minColor: \"#FFFFFF\",\n          maxColor: \"#DA70D6\",\n        },\n        tooltip: {\n          style: { color: \"#000\" },\n          formatter() {\n            const addCommas = (value) => {\n              return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            };\n            return (\n              `<b>${this.series.xAxis.categories[this.point.x]}</b> had<br>` +\n              `<b>${addCommas(this.point.value)}</b> video views on <br>` +\n              `<b>${this.series.yAxis.categories[this.point.y]}</b>`\n            );\n          },\n        },\n        series: [\n          {\n            name: \"Video Views\",\n            borderWidth: 1,\n            data: [],\n            dataLabels: {\n              enabled: true,\n              color: \"#000000\",\n              formatter() {\n                const numericSymbols = [\"K\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n                if (this.point.value >= 1000) {\n                  const symbolIndex = Math.floor(\n                    Math.log10(this.point.value) / 3\n                  );\n                  const scaledValue =\n                    this.point.value / Math.pow(1000, symbolIndex);\n                  const symbol = numericSymbols[symbolIndex - 1];\n                  return `${Math.ceil(scaledValue)}${symbol}`;\n                }\n                return this.point.value;\n              },\n            },\n          },\n        ],\n        responsive: {\n          rules: [\n            {\n              condition: {\n                maxWidth: 500,\n              },\n              chartOptions: {\n                yAxis: {\n                  labels: {\n                    format: \"{substr value 0 1}\",\n                  },\n                },\n              },\n            },\n          ],\n        },\n      },\n      fullData: [],\n    };\n  },\n  watch: {\n    chartData: {\n      handler(newChartData, oldChartData) {\n        if (newChartData !== oldChartData) {\n          this.updateChartData(newChartData);\n        }\n      },\n      deep: true,\n    },\n  },\n  created() {\n    this.updateChartData(this.chartData);\n  },\n  methods: {\n    updateChartData(data) {\n      this.fullData = data;\n      // console.log(this.fullData);\n      const filteredData = this.fullData.map((item) => ({\n        division: item[this.divisionProp],\n        service: item[this.serviceProp],\n        profile_name: item[this.profileNameProp],\n        report_date: item[this.reportDateProp],\n        insight_video_views: item[this.videoViewsProp],\n      }));\n\n      const generateDateRanges = (fullData) => {\n        const dates = [...new Set(fullData.map((dt) => dt.report_date))].sort();\n        const startDate = moment(dates[0]);\n        const endDate = moment(dates[dates.length - 1]);\n\n        const diffDays = endDate.diff(startDate, \"days\");\n        const diffMonths = endDate.diff(startDate, \"months\");\n\n        const sumInsightVideoViews = (start, end, division) =>\n          fullData\n            .filter(\n              (dt) =>\n                dt.division === division &&\n                moment(dt.report_date).isBetween(start, end, null, \"[)\")\n            )\n            .reduce((sum, dt) => sum + dt.insight_video_views, 0);\n\n        const uniqueDivisions = [...new Set(fullData.map((dt) => dt.division))];\n        const ranges = [];\n\n        uniqueDivisions.forEach((division) => {\n          let current = startDate.clone();\n\n          while (current.isBefore(endDate) || current.isSame(endDate, \"day\")) {\n            let next;\n            let format;\n\n            if (diffDays <= 14) {\n              next = current.clone().add(1, \"day\");\n              format = \"ll\";\n            } else if (diffMonths <= 6) {\n              current.startOf(\"week\");\n              next = current.clone().add(1, \"week\");\n              format = \"ll\";\n            } else {\n              current.startOf(\"month\");\n              next = current.clone().add(1, \"month\");\n              format = \"MMMM, YYYY\";\n            }\n\n            ranges.push({\n              division,\n              date: current.format(format),\n              insight_video_views: sumInsightVideoViews(\n                current,\n                next,\n                division\n              ),\n            });\n\n            current = next;\n          }\n        });\n\n        return ranges;\n      };\n\n      let yAxis = [\n        ...new Set(generateDateRanges(filteredData).map((d) => d.date)),\n      ];\n      let xAxis = [\n        ...new Set(generateDateRanges(filteredData).map((d) => d.division)),\n      ];\n\n      this.chartOptions.yAxis.categories = yAxis;\n      this.chartOptions.xAxis.categories = xAxis;\n\n      const groupedRanges = generateDateRanges(filteredData).reduce(\n        (acc, range) => {\n          if (!acc[range.division]) {\n            acc[range.division] = [];\n          }\n          acc[range.division].push(range);\n          return acc;\n        },\n        {}\n      );\n\n      const matrix = Object.keys(groupedRanges).flatMap((division) => {\n        const divisionIndex = xAxis.indexOf(division);\n        return groupedRanges[division].map((range, dateIndex) => [\n          divisionIndex,\n          dateIndex,\n          range.insight_video_views,\n        ]);\n      });\n\n      this.chartOptions.series[0].data = matrix;\n      console.log(JSON.stringify(this.chartOptions));\n    },\n  },\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}