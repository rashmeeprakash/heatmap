{"ast":null,"code":"// import moment from \"moment\";\n\nexport default {\n  // props: {\n  //   chartData: {\n  //     type: Array,\n  //     default: () => [],\n  //   },\n  //   divisionProp: {\n  //     type: String,\n  //     default: \"division\",\n  //   },\n  //   serviceProp: {\n  //     type: String,\n  //     default: \"service\",\n  //   },\n  //   profileNameProp: {\n  //     type: String,\n  //     default: \"profile_name\",\n  //   },\n  //   reportDateProp: {\n  //     type: String,\n  //     default: \"report_date\",\n  //   },\n  //   videoViewsProp: {\n  //     type: String,\n  //     default: \"insight_video_views\",\n  //   },\n  // },\n  data() {\n    return {\n      chartOptions: {\n        chart: {\n          backgroundColor: \"#fbfcf8\",\n          type: \"heatmap\",\n          plotBorderWidth: 1,\n          height: \"100%\",\n          margin: [0, 0, 0, 0]\n        },\n        title: {\n          text: \"Video Views\",\n          align: \"center\"\n        },\n        exporting: {\n          enabled: true,\n          buttons: {\n            contextButton: {\n              menuItems: [\"viewFullscreen\", \"printChart\", \"separator\", \"downloadPNG\", \"downloadJPEG\", \"separator\", \"downloadPDF\", \"downloadCSV\"]\n            }\n          }\n        },\n        credits: {\n          enabled: false\n        },\n        legend: {\n          enabled: true,\n          itemStyle: {\n            color: \"#000\"\n          }\n        },\n        rangeSelector: {\n          enabled: false\n        },\n        navigator: {\n          enabled: false\n        },\n        scrollbar: {\n          enabled: false\n        },\n        xAxis: {\n          categories: [\"Latin America\", \"South & Central Asia\", \"Persian News Network\", \"Eurasia\", \"East Asia & Pacific\", \"Africa\", \"English\"]\n        },\n        yAxis: {\n          categories: [\"Jun 16, 2024\", \"Jun 23, 2024\", \"Jun 30, 2024\", \"Jul 7, 2024\", \"Jul 14, 2024\"],\n          reversed: false\n        },\n        accessibility: {\n          point: {\n            descriptionFormat: \"{(add index 1)}. {series.xAxis.categories.(x)} {series.yAxis.categories.(y)}, {value}.\"\n          }\n        },\n        colorAxis: {\n          min: 0,\n          minColor: \"#FFFFFF\",\n          maxColor: \"#DA70D6\"\n        },\n        tooltip: {\n          style: {\n            color: \"#000\"\n          }\n        },\n        series: [{\n          name: \"Video Views\",\n          borderWidth: 1,\n          data: [[0, 0, 75059], [0, 1, 493747], [0, 2, 449083], [0, 3, 490321], [0, 4, 429733], [1, 0, 103570], [1, 1, 340369], [1, 2, 383821], [1, 3, 452833], [1, 4, 511894], [2, 0, 1361371], [2, 1, 4394413], [2, 2, 4518221], [2, 3, 4581342], [2, 4, 4623790], [3, 0, 231918], [3, 1, 976761], [3, 2, 791173], [3, 3, 1010918], [3, 4, 1065976], [4, 0, 2186104], [4, 1, 7183474], [4, 2, 7521511], [4, 3, 7750003], [4, 4, 7846560], [5, 0, 225868], [5, 1, 857518], [5, 2, 897654], [5, 3, 908779], [5, 4, 933288], [6, 0, 284781], [6, 1, 2015884], [6, 2, 1168136], [6, 3, 1088461], [6, 4, 1403736]],\n          dataLabels: {\n            enabled: true,\n            color: \"#000000\"\n          }\n        }],\n        responsive: {\n          rules: [{\n            condition: {\n              maxWidth: 500\n            },\n            chartOptions: {\n              yAxis: {\n                labels: {\n                  format: \"{substr value 0 1}\"\n                }\n              }\n            }\n          }]\n        }\n      },\n      fullData: []\n    };\n  },\n  watch: {\n    chartData: {\n      handler(newChartData, oldChartData) {\n        if (newChartData !== oldChartData) {\n          this.updateChartData(newChartData);\n        }\n      },\n      deep: true\n    }\n  }\n  // created() {\n  //   this.updateChartData(this.chartData);\n  // },\n  // methods: {\n  //   updateChartData(data) {\n  //     this.fullData = data;\n  //     // console.log(this.fullData);\n  //     const filteredData = this.fullData.map((item) => ({\n  //       division: item[this.divisionProp],\n  //       service: item[this.serviceProp],\n  //       profile_name: item[this.profileNameProp],\n  //       report_date: item[this.reportDateProp],\n  //       insight_video_views: item[this.videoViewsProp],\n  //     }));\n\n  //     const generateDateRanges = (fullData) => {\n  //       const dates = [...new Set(fullData.map((dt) => dt.report_date))].sort();\n  //       const startDate = moment(dates[0]);\n  //       const endDate = moment(dates[dates.length - 1]);\n\n  //       const diffDays = endDate.diff(startDate, \"days\");\n  //       const diffMonths = endDate.diff(startDate, \"months\");\n\n  //       const sumInsightVideoViews = (start, end, division) =>\n  //         fullData\n  //           .filter(\n  //             (dt) =>\n  //               dt.division === division &&\n  //               moment(dt.report_date).isBetween(start, end, null, \"[)\")\n  //           )\n  //           .reduce((sum, dt) => sum + dt.insight_video_views, 0);\n\n  //       const uniqueDivisions = [...new Set(fullData.map((dt) => dt.division))];\n  //       const ranges = [];\n\n  //       uniqueDivisions.forEach((division) => {\n  //         let current = startDate.clone();\n\n  //         while (current.isBefore(endDate) || current.isSame(endDate, \"day\")) {\n  //           let next;\n  //           let format;\n\n  //           if (diffDays <= 14) {\n  //             next = current.clone().add(1, \"day\");\n  //             format = \"ll\";\n  //           } else if (diffMonths <= 6) {\n  //             current.startOf(\"week\");\n  //             next = current.clone().add(1, \"week\");\n  //             format = \"ll\";\n  //           } else {\n  //             current.startOf(\"month\");\n  //             next = current.clone().add(1, \"month\");\n  //             format = \"MMMM, YYYY\";\n  //           }\n\n  //           ranges.push({\n  //             division,\n  //             date: current.format(format),\n  //             insight_video_views: sumInsightVideoViews(\n  //               current,\n  //               next,\n  //               division\n  //             ),\n  //           });\n\n  //           current = next;\n  //         }\n  //       });\n\n  //       return ranges;\n  //     };\n\n  //     let yAxis = [\n  //       ...new Set(generateDateRanges(filteredData).map((d) => d.date)),\n  //     ];\n  //     let xAxis = [\n  //       ...new Set(generateDateRanges(filteredData).map((d) => d.division)),\n  //     ];\n\n  //     this.chartOptions.yAxis.categories = yAxis;\n  //     this.chartOptions.xAxis.categories = xAxis;\n\n  //     const groupedRanges = generateDateRanges(filteredData).reduce(\n  //       (acc, range) => {\n  //         if (!acc[range.division]) {\n  //           acc[range.division] = [];\n  //         }\n  //         acc[range.division].push(range);\n  //         return acc;\n  //       },\n  //       {}\n  //     );\n\n  //     const matrix = Object.keys(groupedRanges).flatMap((division) => {\n  //       const divisionIndex = xAxis.indexOf(division);\n  //       return groupedRanges[division].map((range, dateIndex) => [\n  //         divisionIndex,\n  //         dateIndex,\n  //         range.insight_video_views,\n  //       ]);\n  //     });\n\n  //     this.chartOptions.series[0].data = matrix;\n  //     console.log(JSON.stringify(this.chartOptions));\n  //   },\n  // },\n};","map":{"version":3,"names":["data","chartOptions","chart","backgroundColor","type","plotBorderWidth","height","margin","title","text","align","exporting","enabled","buttons","contextButton","menuItems","credits","legend","itemStyle","color","rangeSelector","navigator","scrollbar","xAxis","categories","yAxis","reversed","accessibility","point","descriptionFormat","colorAxis","min","minColor","maxColor","tooltip","style","series","name","borderWidth","dataLabels","responsive","rules","condition","maxWidth","labels","format","fullData","watch","chartData","handler","newChartData","oldChartData","updateChartData","deep"],"sources":["/Users/rashmee/Desktop/usagm/heatmap/src/components/MainHeatMap.vue"],"sourcesContent":["<template>\n  <div>\n    <highcharts\n      :constructor-type=\"'stockChart'\"\n      class=\"hc\"\n      :options=\"chartOptions\"\n      ref=\"chart\"\n    ></highcharts>\n  </div>\n</template>\n\n<script>\n// import moment from \"moment\";\n\nexport default {\n  // props: {\n  //   chartData: {\n  //     type: Array,\n  //     default: () => [],\n  //   },\n  //   divisionProp: {\n  //     type: String,\n  //     default: \"division\",\n  //   },\n  //   serviceProp: {\n  //     type: String,\n  //     default: \"service\",\n  //   },\n  //   profileNameProp: {\n  //     type: String,\n  //     default: \"profile_name\",\n  //   },\n  //   reportDateProp: {\n  //     type: String,\n  //     default: \"report_date\",\n  //   },\n  //   videoViewsProp: {\n  //     type: String,\n  //     default: \"insight_video_views\",\n  //   },\n  // },\n  data() {\n    return {\n      chartOptions: {\n        chart: {\n          backgroundColor: \"#fbfcf8\",\n          type: \"heatmap\",\n          plotBorderWidth: 1,\n          height: \"100%\",\n          margin: [0, 0, 0, 0],\n        },\n        title: { text: \"Video Views\", align: \"center\" },\n        exporting: {\n          enabled: true,\n          buttons: {\n            contextButton: {\n              menuItems: [\n                \"viewFullscreen\",\n                \"printChart\",\n                \"separator\",\n                \"downloadPNG\",\n                \"downloadJPEG\",\n                \"separator\",\n                \"downloadPDF\",\n                \"downloadCSV\",\n              ],\n            },\n          },\n        },\n        credits: { enabled: false },\n        legend: { enabled: true, itemStyle: { color: \"#000\" } },\n        rangeSelector: { enabled: false },\n        navigator: { enabled: false },\n        scrollbar: { enabled: false },\n        xAxis: {\n          categories: [\n            \"Latin America\",\n            \"South & Central Asia\",\n            \"Persian News Network\",\n            \"Eurasia\",\n            \"East Asia & Pacific\",\n            \"Africa\",\n            \"English\",\n          ],\n        },\n        yAxis: {\n          categories: [\n            \"Jun 16, 2024\",\n            \"Jun 23, 2024\",\n            \"Jun 30, 2024\",\n            \"Jul 7, 2024\",\n            \"Jul 14, 2024\",\n          ],\n          reversed: false,\n        },\n        accessibility: {\n          point: {\n            descriptionFormat:\n              \"{(add index 1)}. {series.xAxis.categories.(x)} {series.yAxis.categories.(y)}, {value}.\",\n          },\n        },\n        colorAxis: { min: 0, minColor: \"#FFFFFF\", maxColor: \"#DA70D6\" },\n        tooltip: { style: { color: \"#000\" } },\n        series: [\n          {\n            name: \"Video Views\",\n            borderWidth: 1,\n            data: [\n              [0, 0, 75059],\n              [0, 1, 493747],\n              [0, 2, 449083],\n              [0, 3, 490321],\n              [0, 4, 429733],\n              [1, 0, 103570],\n              [1, 1, 340369],\n              [1, 2, 383821],\n              [1, 3, 452833],\n              [1, 4, 511894],\n              [2, 0, 1361371],\n              [2, 1, 4394413],\n              [2, 2, 4518221],\n              [2, 3, 4581342],\n              [2, 4, 4623790],\n              [3, 0, 231918],\n              [3, 1, 976761],\n              [3, 2, 791173],\n              [3, 3, 1010918],\n              [3, 4, 1065976],\n              [4, 0, 2186104],\n              [4, 1, 7183474],\n              [4, 2, 7521511],\n              [4, 3, 7750003],\n              [4, 4, 7846560],\n              [5, 0, 225868],\n              [5, 1, 857518],\n              [5, 2, 897654],\n              [5, 3, 908779],\n              [5, 4, 933288],\n              [6, 0, 284781],\n              [6, 1, 2015884],\n              [6, 2, 1168136],\n              [6, 3, 1088461],\n              [6, 4, 1403736],\n            ],\n            dataLabels: { enabled: true, color: \"#000000\" },\n          },\n        ],\n        responsive: {\n          rules: [\n            {\n              condition: { maxWidth: 500 },\n              chartOptions: {\n                yAxis: { labels: { format: \"{substr value 0 1}\" } },\n              },\n            },\n          ],\n        },\n      },\n      fullData: [],\n    };\n  },\n  watch: {\n    chartData: {\n      handler(newChartData, oldChartData) {\n        if (newChartData !== oldChartData) {\n          this.updateChartData(newChartData);\n        }\n      },\n      deep: true,\n    },\n  },\n  // created() {\n  //   this.updateChartData(this.chartData);\n  // },\n  // methods: {\n  //   updateChartData(data) {\n  //     this.fullData = data;\n  //     // console.log(this.fullData);\n  //     const filteredData = this.fullData.map((item) => ({\n  //       division: item[this.divisionProp],\n  //       service: item[this.serviceProp],\n  //       profile_name: item[this.profileNameProp],\n  //       report_date: item[this.reportDateProp],\n  //       insight_video_views: item[this.videoViewsProp],\n  //     }));\n\n  //     const generateDateRanges = (fullData) => {\n  //       const dates = [...new Set(fullData.map((dt) => dt.report_date))].sort();\n  //       const startDate = moment(dates[0]);\n  //       const endDate = moment(dates[dates.length - 1]);\n\n  //       const diffDays = endDate.diff(startDate, \"days\");\n  //       const diffMonths = endDate.diff(startDate, \"months\");\n\n  //       const sumInsightVideoViews = (start, end, division) =>\n  //         fullData\n  //           .filter(\n  //             (dt) =>\n  //               dt.division === division &&\n  //               moment(dt.report_date).isBetween(start, end, null, \"[)\")\n  //           )\n  //           .reduce((sum, dt) => sum + dt.insight_video_views, 0);\n\n  //       const uniqueDivisions = [...new Set(fullData.map((dt) => dt.division))];\n  //       const ranges = [];\n\n  //       uniqueDivisions.forEach((division) => {\n  //         let current = startDate.clone();\n\n  //         while (current.isBefore(endDate) || current.isSame(endDate, \"day\")) {\n  //           let next;\n  //           let format;\n\n  //           if (diffDays <= 14) {\n  //             next = current.clone().add(1, \"day\");\n  //             format = \"ll\";\n  //           } else if (diffMonths <= 6) {\n  //             current.startOf(\"week\");\n  //             next = current.clone().add(1, \"week\");\n  //             format = \"ll\";\n  //           } else {\n  //             current.startOf(\"month\");\n  //             next = current.clone().add(1, \"month\");\n  //             format = \"MMMM, YYYY\";\n  //           }\n\n  //           ranges.push({\n  //             division,\n  //             date: current.format(format),\n  //             insight_video_views: sumInsightVideoViews(\n  //               current,\n  //               next,\n  //               division\n  //             ),\n  //           });\n\n  //           current = next;\n  //         }\n  //       });\n\n  //       return ranges;\n  //     };\n\n  //     let yAxis = [\n  //       ...new Set(generateDateRanges(filteredData).map((d) => d.date)),\n  //     ];\n  //     let xAxis = [\n  //       ...new Set(generateDateRanges(filteredData).map((d) => d.division)),\n  //     ];\n\n  //     this.chartOptions.yAxis.categories = yAxis;\n  //     this.chartOptions.xAxis.categories = xAxis;\n\n  //     const groupedRanges = generateDateRanges(filteredData).reduce(\n  //       (acc, range) => {\n  //         if (!acc[range.division]) {\n  //           acc[range.division] = [];\n  //         }\n  //         acc[range.division].push(range);\n  //         return acc;\n  //       },\n  //       {}\n  //     );\n\n  //     const matrix = Object.keys(groupedRanges).flatMap((division) => {\n  //       const divisionIndex = xAxis.indexOf(division);\n  //       return groupedRanges[division].map((range, dateIndex) => [\n  //         divisionIndex,\n  //         dateIndex,\n  //         range.insight_video_views,\n  //       ]);\n  //     });\n\n  //     this.chartOptions.series[0].data = matrix;\n  //     console.log(JSON.stringify(this.chartOptions));\n  //   },\n  // },\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}