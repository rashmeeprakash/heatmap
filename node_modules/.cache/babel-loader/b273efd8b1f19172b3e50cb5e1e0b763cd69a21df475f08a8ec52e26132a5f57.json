{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_highcharts = _resolveComponent(\"highcharts\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_highcharts, {\n    \"constructor-type\": 'mapChart',\n    options: $data.chartOptions,\n    ref: \"highcharts\"\n  }, null, 8 /* PROPS */, [\"options\"])]);\n}","map":{"version":3,"names":["_createElementBlock","_createVNode","_component_highcharts","options","$data","chartOptions","ref"],"sources":["/Users/rashmee/Desktop/usagm/heatmap/src/components/MainMapChart.vue"],"sourcesContent":["<template>\n  <div>\n    <highcharts\n      :constructor-type=\"'mapChart'\"\n      :options=\"chartOptions\"\n      ref=\"highcharts\"\n    ></highcharts>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    chartData: {\n      type: Array,\n      default: () => [],\n    },\n    currentDataType: {\n      type: String,\n      default: \"\",\n    },\n    colorSettings: {\n      type: Object,\n      default: () => ({}),\n    },\n  },\n  data() {\n    return {\n      chartOptions: {\n        chart: {\n          map: \"myMapName\",\n        },\n        title: {\n          text: \"\",\n        },\n        accessibility: {\n          enabled: false,\n        },\n        exporting: {\n          enabled: true,\n          buttons: {\n            contextButton: {\n              menuItems: [\n                \"viewFullscreen\",\n                \"printChart\",\n                \"separator\",\n                \"downloadPNG\",\n                \"downloadJPEG\",\n                \"separator\",\n                \"downloadPDF\",\n                \"downloadCSV\",\n              ],\n            },\n          },\n        },\n        credits: {\n          enabled: false,\n        },\n        mapNavigation: {\n          enabled: true,\n          buttonOptions: {\n            verticalAlign: \"bottom\",\n          },\n        },\n        colorAxis: {\n          type: \"logarithmic\",\n          allowNegativeLog: true,\n        },\n        tooltip: {\n          formatter() {\n            return `<b>${this.point.country}</b>: ${this.point[\n              this.series.colorKey\n            ].toLocaleString()}`;\n          },\n        },\n        series: [\n          {\n            data: [],\n            joinBy: [\"name\", \"country\"],\n            name: \"\",\n            colorKey: \"\",\n            dataLabels: {\n              enabled: false,\n            },\n          },\n        ],\n      },\n    };\n  },\n  watch: {\n    chartData: {\n      handler(newChartData, oldChartData) {\n        if (newChartData !== oldChartData) {\n          this.updateChartData(newChartData);\n        }\n      },\n      deep: true,\n    },\n    currentDataType: {\n      handler(newType, oldType) {\n        if (newType !== oldType) {\n          this.updateChartData(this.chartData);\n        }\n      },\n    },\n  },\n  created() {\n    this.updateChartData(this.chartData);\n  },\n  methods: {\n    updateChartData(data) {\n      const countryNameMapping = {\n        \"United States\": \"United States of America\",\n        \"Russian Federation\": \"Russia\",\n      };\n\n      let newData = data.reduce((acc, curr) => {\n        let countryName = countryNameMapping[curr.country] || curr.country;\n        const foundIndex = acc.findIndex(\n          (item) => item.country === countryName\n        );\n        if (foundIndex !== -1) {\n          acc[foundIndex][this.currentDataType] += curr[this.currentDataType];\n        } else {\n          const newDataEntry = { country: countryName };\n          newDataEntry[this.currentDataType] = curr[this.currentDataType];\n          acc.push(newDataEntry);\n        }\n        return acc;\n      }, []);\n\n      let minData = Math.min(...newData.map((v) => v[this.currentDataType]));\n      const maxData = Math.max(...newData.map((v) => v[this.currentDataType]));\n      if (minData === 0) minData = 1;\n\n      const { maxColor, stops } = this.colorSettings[this.currentDataType];\n\n      this.chartOptions.title.text = this.currentDataType\n        .split(\"_\")\n        .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(\" \");\n      this.chartOptions.series[0].name = this.chartOptions.title.text;\n      this.chartOptions.series[0].colorKey = this.currentDataType;\n      this.chartOptions.series[0].data = newData;\n      this.chartOptions.colorAxis.min = minData;\n      this.chartOptions.colorAxis.max = maxData;\n      this.chartOptions.colorAxis.minColor = \"#fff\";\n      this.chartOptions.colorAxis.maxColor = maxColor;\n      this.chartOptions.colorAxis.stops = stops;\n\n      // Update the chart\n      if (this.$refs.highcharts) {\n        this.$refs.highcharts.chart.update(this.chartOptions);\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Add your component-specific styles here */\n</style>\n"],"mappings":";;;uBACEA,mBAAA,CAMM,cALJC,YAAA,CAIcC,qBAAA;IAHX,kBAAgB,EAAE,UAAU;IAC5BC,OAAO,EAAEC,KAAA,CAAAC,YAAY;IACtBC,GAAG,EAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}