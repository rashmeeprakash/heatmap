{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_highcharts = _resolveComponent(\"highcharts\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_highcharts, {\n    \"constructor-type\": 'stockChart',\n    class: \"hc\",\n    options: $data.chartOptions,\n    ref: \"chart\"\n  }, null, 8 /* PROPS */, [\"options\"])]);\n}","map":{"version":3,"names":["_createElementBlock","_createVNode","_component_highcharts","class","options","$data","chartOptions","ref"],"sources":["/Users/rashmee/Desktop/usagm/heatmap/src/components/WebTab/HeatMap.vue"],"sourcesContent":["<template>\n  <div>\n    <highcharts\n      :constructor-type=\"'stockChart'\"\n      class=\"hc\"\n      :options=\"chartOptions\"\n      ref=\"chart\"\n    ></highcharts>\n  </div>\n</template>\n\n<script>\nimport moment from \"moment\";\n\nexport default {\n  props: {\n    chartData: {\n      type: Array,\n      default: () => [],\n    },\n  },\n  data() {\n    return {\n      chartOptions: {\n        chart: {\n          backgroundColor: \"#fbfcf8\",\n          type: \"heatmap\",\n          plotBorderWidth: 1,\n          height: \"100%\",\n          margin: [0, 0, 0, 0],\n        },\n        title: { text: \"Video Views\", align: \"center\" },\n        exporting: {\n          enabled: true,\n          buttons: {\n            contextButton: {\n              menuItems: [\n                \"viewFullscreen\",\n                \"printChart\",\n                \"separator\",\n                \"downloadPNG\",\n                \"downloadJPEG\",\n                \"separator\",\n                \"downloadPDF\",\n                \"downloadCSV\",\n              ],\n            },\n          },\n        },\n        credits: { enabled: false },\n        legend: { enabled: true, itemStyle: { color: \"#000\" } },\n        rangeSelector: { enabled: false },\n        navigator: { enabled: false },\n        scrollbar: { enabled: false },\n        xAxis: { categories: [] },\n        yAxis: { categories: [], reversed: false },\n        accessibility: {\n          point: {\n            descriptionFormat:\n              \"{(add index 1)}. {series.xAxis.categories.(x)} {series.yAxis.categories.(y)}, {value}.\",\n          },\n        },\n        colorAxis: { min: 0, minColor: \"#FFFFFF\", maxColor: \"#DA70D6\" },\n        tooltip: { style: { color: \"#000\" } },\n        series: [\n          {\n            name: \"Video Views\",\n            borderWidth: 1,\n            data: [],\n            dataLabels: { enabled: true, color: \"#000000\" },\n          },\n        ],\n        responsive: {\n          rules: [\n            {\n              condition: { maxWidth: 500 },\n              chartOptions: {\n                yAxis: { labels: { format: \"{substr value 0 1}\" } },\n              },\n            },\n          ],\n        },\n      },\n      fullData: [],\n    };\n  },\n  watch: {\n    chartData: {\n      handler(newChartData, oldChartData) {\n        if (newChartData !== oldChartData) {\n          this.updateChartData(newChartData);\n        }\n      },\n      deep: true,\n    },\n  },\n  created() {\n    this.updateChartData(this.chartData);\n  },\n  methods: {\n    updateChartData(data) {\n      this.fullData = data;\n      const categories = [\n        ...new Set(\n          this.fullData\n            .map((dt) => moment(dt.report_date).format(\"ll\"))\n            .sort(\n              (a, b) => moment(a, \"ll\").valueOf() - moment(b, \"ll\").valueOf()\n            )\n        ),\n      ];\n\n      const transformedData = this.getPropertiesSeries();\n\n      this.chartOptions.xAxis.categories = categories;\n      this.chartOptions.series = transformedData;\n    },\n    getPropertiesSeries() {\n      const properties = [\n        { prop: \"visits\", color: \"#DA70D6\" },\n        { prop: \"article_views\", color: \"#FF7F50\" },\n        { prop: \"return_visits\", color: \"#FFD700\" },\n        { prop: \"audio_play\", color: \"#20B2AA\" },\n        { prop: \"video_play\", color: \"#6B8E23\" },\n        //      { prop: \"time_spent_per_visit\", color: \"#ff0000\", yAxis: 1 },\n      ];\n\n      return properties.map(({ prop, color, yAxis }) => {\n        const groupedData = this.fullData.reduce((acc, item) => {\n          const date = item.report_date;\n          if (!acc[date]) {\n            acc[date] = {};\n          }\n          acc[date][prop] = (acc[date][prop] || 0) + item[prop];\n          return acc;\n        }, {});\n\n        const aggregatedValues = Object.entries(groupedData).map(\n          ([date, values]) => ({\n            name: moment(date).format(\"lll\"),\n            y: values[prop],\n          })\n        );\n\n        return {\n          name: prop\n            .split(\"_\")\n            .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n            .join(\" \"),\n          data: aggregatedValues,\n          color: color,\n          yAxis: yAxis || 0,\n        };\n      });\n    },\n  },\n};\n</script>\n"],"mappings":";;;uBACEA,mBAAA,CAOM,cANJC,YAAA,CAKcC,qBAAA;IAJX,kBAAgB,EAAE,YAAY;IAC/BC,KAAK,EAAC,IAAI;IACTC,OAAO,EAAEC,KAAA,CAAAC,YAAY;IACtBC,GAAG,EAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}